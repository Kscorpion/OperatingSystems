操作系统内存管理：

1.什么是逻辑地址？

	逻辑地址其实就是程序自身看到的地址空间,是一个抽象的地址,逻辑内存需要映射到物理内存中才能完成对内存的操作。

2.为什么不直接操作物理地址？

	程序是写死的,操作的物理地址是固定的,硬件可用地址是变化的,操作系统是多进程处理的,为了保证进程安全。

3.逻辑地址与物理地址如何映射？

	1)假设程序1占用大小空间是0-200,程序2占用0-100,那么将地址0-200分配给1将200-300的空间分配给2,如果程序1执行完成则释放0-200这一段内存,如果此时有个0-201的程序3,那么程序3则无法使用0-200这部分内存,假设很长时间都没有被使用那么这段内存就会一直被闲置,那么这部分内存就被称为外碎片。

	2)分页思想：对程序逻辑内存和物理内存分成很多片,每一片称为页逻辑内存中每一片称为page(页),物理内存每一页称为page frame (页帧),从页到页帧的需要一个表来维护映射关系,这个表就是pagetable 页表,页表中不止存储每个页和每个页帧对应的地址还包括当前条目是否可用,当前页的读写权限,当前帧是否为dirty等等,每个进程都会有自己的页表。

4.知识扩展:
	1)内存第一个地址里面"住"的是一个字节(Byte)的数据。
	2)32为OS物理地址有2^32个,因而只能使用4GB内存。
	3)任何一个32位的程序认为可操作的逻辑地址是2^32个即4GB。
	4)以上操作一定会造成多程序使用内存总和大于物理内存,此时会借助磁盘,将不着急使用的内存先放到磁盘,pagetable对应的帧号只显示磁盘。

5.逻辑地址示例:
	
	机器：32位系统 256MB内存 ,页大小为4KB
	程序：32位程序
	
	4K = 12 bit (4K=2^12)

	因而 
		逻辑地址32bit = 20bit页号+12bit偏移量
		物理地址28bit = 16bit帧号+12bit偏移量

	例：
	12bit刚好是1a3
	20bit页号就是00001
	根据页号查询页表就可以查到页帧号,通过页帧号在使用偏移量查找,就找到了最终地址。
	
	那么如果对应的帧号是磁盘desk会怎样？
		此时就会发生缺页中断/缺页异常,会触发程序进入内核态,内核到磁盘中找到这一帧对应的数据,把他加载到屋里内存的帧中,然后把加载好的帧号填写到pagetable中重新进行寻址,那么如果内存的帧已经满了呢？这里面会涉及到帧的置换算法,把最小少使用的帧逐出放到磁盘中,把需要使用的放入帧中,这就是linux磁盘中的swapping (交换分区)

	小节：
		1)分页使得每个程序都有很大的逻辑地址空间,通过映射磁盘和高效的置换算法,使内存"无限大"
		2)分页使不同的进程内存隔离,保证了安全性。
		3)分页降低了内存碎片的问题。
		4)综上所述,分页过程中需要两次读取内存,时间上需要进行优化,也表会占用较大空间也需要优化。

6.分页中的时间与空间优化
	时间优化：
		1)将最常访问的几个(一般是8-128个左右)页表项存到访问速度更快的硬件中,一般使用MMU(内存管理单元),这个小表的名称为TLB(Translation Lookaside Buffer),也可称为快表。
		2)先寻址查询TLB如果miss再查PT,快表命中率很高,因为程序最常访问的也没有几个。
	空间优化：
		使用多级页表：根据一级页表的缺点,多级页表的出现肯定是可以节约内存的。页表寻址是用cr3寄存器来确定一级页表地址的,所以一级页表的地址必须指向确定的物理页,否则就会出现错误,所以如果用一级页表的话,就必须把全部的页表都加载进去。而使用二级页表的话,只需要加载一个页目录表(一级页表),大小为4K,可以管理1024个二级页表。可能你会有疑问,这1024个二级页表也是需要内存空间的,这下反而需要4MB+4KB的内存,反而更多了。
其实二级页表并不是一定要存在内存中的,内存中只需要一个一级页表地址存在cr3寄存器即可,二级页表可以使用缺页中断从外存移入内存。



7.程序内部内存管理-分段(堆区和栈区就是一个段)
	分段和分页结合的方式:每个段有很多页,页表中存储段号和页号唯一映射物理帧号。
	段叶结合的模式只在x86 intel cpu等少数cpu上还支持,更新的x86-64架构都不再支持,但是仍然保留了段的概念,只是程序层面便于运算,并不会影响分页式内存管理。
	
	分段示例(程序层面逻辑上的段)：
			
 	高	1)Kernel Space (1GB)
	|	2)Stack	(栈区从高往低增长)
	|	3)Libraries(shared/only for XXX)	(函数库:多个进程可以共享=>进程间通信共享内存)
	|	4)Heap	(堆 从低往高增长)
	|	5)Data (程序中静态的变量)
	低	6)Text(程序二进制字节码)
	
